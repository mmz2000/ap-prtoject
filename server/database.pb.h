// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_database_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_database_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_database_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_database_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_database_2eproto;
namespace database {
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Queue;
class QueueDefaultTypeInternal;
extern QueueDefaultTypeInternal _Queue_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace database
PROTOBUF_NAMESPACE_OPEN
template<> ::database::Game* Arena::CreateMaybeMessage<::database::Game>(Arena*);
template<> ::database::Player* Arena::CreateMaybeMessage<::database::Player>(Arena*);
template<> ::database::Queue* Arena::CreateMaybeMessage<::database::Queue>(Arena*);
template<> ::database::User* Arena::CreateMaybeMessage<::database::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace database {

// ===================================================================

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 score = 5;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 session_id = 6;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 queue_id = 7;
  void clear_queue_id();
  static const int kQueueIdFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 queue_id() const;
  void set_queue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 game_id = 8;
  void clear_game_id();
  static const int kGameIdFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:database.User)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 score_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 queue_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Queue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.Queue) */ {
 public:
  Queue();
  virtual ~Queue();

  Queue(const Queue& from);
  Queue(Queue&& from) noexcept
    : Queue() {
    *this = ::std::move(from);
  }

  inline Queue& operator=(const Queue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Queue& operator=(Queue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Queue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Queue* internal_default_instance() {
    return reinterpret_cast<const Queue*>(
               &_Queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Queue* other);
  friend void swap(Queue& a, Queue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Queue* New() const final {
    return CreateMaybeMessage<Queue>(nullptr);
  }

  Queue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Queue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Queue& from);
  void MergeFrom(const Queue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Queue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.Queue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 user_ids = 3;
  int user_ids_size() const;
  void clear_user_ids();
  static const int kUserIdsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_ids(int index) const;
  void set_user_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_user_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_user_ids();

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:database.Queue)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > user_ids_;
  mutable std::atomic<int> _user_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Player* other);
  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .types.Player block_info = 2;
  bool has_block_info() const;
  void clear_block_info();
  static const int kBlockInfoFieldNumber = 2;
  const ::types::Player& block_info() const;
  ::types::Player* release_block_info();
  ::types::Player* mutable_block_info();
  void set_allocated_block_info(::types::Player* block_info);

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:database.Player)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::types::Player* block_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// -------------------------------------------------------------------

class Game :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:database.Game) */ {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);
  Game(Game&& from) noexcept
    : Game() {
    *this = ::std::move(from);
  }

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game& operator=(Game&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Game* other);
  friend void swap(Game& a, Game& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Game* New() const final {
    return CreateMaybeMessage<Game>(nullptr);
  }

  Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Game>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "database.Game";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_database_2eproto);
    return ::descriptor_table_database_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .database.Player players = 2;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 2;
  ::database::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Player >*
      mutable_players();
  const ::database::Player& players(int index) const;
  ::database::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Player >&
      players() const;

  // repeated .types.FoodBlock foods = 3;
  int foods_size() const;
  void clear_foods();
  static const int kFoodsFieldNumber = 3;
  ::types::FoodBlock* mutable_foods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FoodBlock >*
      mutable_foods();
  const ::types::FoodBlock& foods(int index) const;
  ::types::FoodBlock* add_foods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FoodBlock >&
      foods() const;

  // repeated .types.WallBlock walls = 4;
  int walls_size() const;
  void clear_walls();
  static const int kWallsFieldNumber = 4;
  ::types::WallBlock* mutable_walls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::WallBlock >*
      mutable_walls();
  const ::types::WallBlock& walls(int index) const;
  ::types::WallBlock* add_walls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::WallBlock >&
      walls() const;

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:database.Game)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FoodBlock > foods_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::WallBlock > walls_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_database_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// uint64 id = 1;
inline void User::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::id() const {
  // @@protoc_insertion_point(field_get:database.User.id)
  return id_;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:database.User.id)
}

// string username = 2;
inline void User::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:database.User.username)
  return username_.GetNoArena();
}
inline void User::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.User.username)
}
inline void User::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.User.username)
}
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.User.username)
}
inline void User::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.User.username)
}
inline std::string* User::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:database.User.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:database.User.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:database.User.username)
}

// string password = 3;
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:database.User.password)
  return password_.GetNoArena();
}
inline void User::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.User.password)
}
inline void User::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.User.password)
}
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.User.password)
}
inline void User::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.User.password)
}
inline std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:database.User.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:database.User.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:database.User.password)
}

// string name = 4;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:database.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:database.User.name)
}
inline void User::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:database.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:database.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:database.User.name)
}
inline std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:database.User.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:database.User.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:database.User.name)
}

// uint64 score = 5;
inline void User::clear_score() {
  score_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::score() const {
  // @@protoc_insertion_point(field_get:database.User.score)
  return score_;
}
inline void User::set_score(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:database.User.score)
}

// uint64 session_id = 6;
inline void User::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::session_id() const {
  // @@protoc_insertion_point(field_get:database.User.session_id)
  return session_id_;
}
inline void User::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:database.User.session_id)
}

// uint64 queue_id = 7;
inline void User::clear_queue_id() {
  queue_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::queue_id() const {
  // @@protoc_insertion_point(field_get:database.User.queue_id)
  return queue_id_;
}
inline void User::set_queue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  queue_id_ = value;
  // @@protoc_insertion_point(field_set:database.User.queue_id)
}

// uint64 game_id = 8;
inline void User::clear_game_id() {
  game_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::game_id() const {
  // @@protoc_insertion_point(field_get:database.User.game_id)
  return game_id_;
}
inline void User::set_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:database.User.game_id)
}

// -------------------------------------------------------------------

// Queue

// uint64 id = 1;
inline void Queue::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Queue::id() const {
  // @@protoc_insertion_point(field_get:database.Queue.id)
  return id_;
}
inline void Queue::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:database.Queue.id)
}

// uint32 size = 2;
inline void Queue::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Queue::size() const {
  // @@protoc_insertion_point(field_get:database.Queue.size)
  return size_;
}
inline void Queue::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:database.Queue.size)
}

// repeated uint64 user_ids = 3;
inline int Queue::user_ids_size() const {
  return user_ids_.size();
}
inline void Queue::clear_user_ids() {
  user_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Queue::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:database.Queue.user_ids)
  return user_ids_.Get(index);
}
inline void Queue::set_user_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:database.Queue.user_ids)
}
inline void Queue::add_user_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  user_ids_.Add(value);
  // @@protoc_insertion_point(field_add:database.Queue.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Queue::user_ids() const {
  // @@protoc_insertion_point(field_list:database.Queue.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Queue::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:database.Queue.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// Player

// uint64 user_id = 1;
inline void Player::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::user_id() const {
  // @@protoc_insertion_point(field_get:database.Player.user_id)
  return user_id_;
}
inline void Player::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:database.Player.user_id)
}

// .types.Player block_info = 2;
inline bool Player::has_block_info() const {
  return this != internal_default_instance() && block_info_ != nullptr;
}
inline const ::types::Player& Player::block_info() const {
  const ::types::Player* p = block_info_;
  // @@protoc_insertion_point(field_get:database.Player.block_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::types::Player*>(
      &::types::_Player_default_instance_);
}
inline ::types::Player* Player::release_block_info() {
  // @@protoc_insertion_point(field_release:database.Player.block_info)
  
  ::types::Player* temp = block_info_;
  block_info_ = nullptr;
  return temp;
}
inline ::types::Player* Player::mutable_block_info() {
  
  if (block_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Player>(GetArenaNoVirtual());
    block_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:database.Player.block_info)
  return block_info_;
}
inline void Player::set_allocated_block_info(::types::Player* block_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_info_);
  }
  if (block_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_info, submessage_arena);
    }
    
  } else {
    
  }
  block_info_ = block_info;
  // @@protoc_insertion_point(field_set_allocated:database.Player.block_info)
}

// -------------------------------------------------------------------

// Game

// uint64 id = 1;
inline void Game::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Game::id() const {
  // @@protoc_insertion_point(field_get:database.Game.id)
  return id_;
}
inline void Game::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:database.Game.id)
}

// repeated .database.Player players = 2;
inline int Game::players_size() const {
  return players_.size();
}
inline void Game::clear_players() {
  players_.Clear();
}
inline ::database::Player* Game::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:database.Game.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Player >*
Game::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:database.Game.players)
  return &players_;
}
inline const ::database::Player& Game::players(int index) const {
  // @@protoc_insertion_point(field_get:database.Game.players)
  return players_.Get(index);
}
inline ::database::Player* Game::add_players() {
  // @@protoc_insertion_point(field_add:database.Game.players)
  return players_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::database::Player >&
Game::players() const {
  // @@protoc_insertion_point(field_list:database.Game.players)
  return players_;
}

// repeated .types.FoodBlock foods = 3;
inline int Game::foods_size() const {
  return foods_.size();
}
inline ::types::FoodBlock* Game::mutable_foods(int index) {
  // @@protoc_insertion_point(field_mutable:database.Game.foods)
  return foods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FoodBlock >*
Game::mutable_foods() {
  // @@protoc_insertion_point(field_mutable_list:database.Game.foods)
  return &foods_;
}
inline const ::types::FoodBlock& Game::foods(int index) const {
  // @@protoc_insertion_point(field_get:database.Game.foods)
  return foods_.Get(index);
}
inline ::types::FoodBlock* Game::add_foods() {
  // @@protoc_insertion_point(field_add:database.Game.foods)
  return foods_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::FoodBlock >&
Game::foods() const {
  // @@protoc_insertion_point(field_list:database.Game.foods)
  return foods_;
}

// repeated .types.WallBlock walls = 4;
inline int Game::walls_size() const {
  return walls_.size();
}
inline ::types::WallBlock* Game::mutable_walls(int index) {
  // @@protoc_insertion_point(field_mutable:database.Game.walls)
  return walls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::WallBlock >*
Game::mutable_walls() {
  // @@protoc_insertion_point(field_mutable_list:database.Game.walls)
  return &walls_;
}
inline const ::types::WallBlock& Game::walls(int index) const {
  // @@protoc_insertion_point(field_get:database.Game.walls)
  return walls_.Get(index);
}
inline ::types::WallBlock* Game::add_walls() {
  // @@protoc_insertion_point(field_add:database.Game.walls)
  return walls_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::WallBlock >&
Game::walls() const {
  // @@protoc_insertion_point(field_list:database.Game.walls)
  return walls_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace database

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_database_2eproto
