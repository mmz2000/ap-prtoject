// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#include "communication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionSubmit_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingGameCycle_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueCreate_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueJoin_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueList_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueStatus_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Register_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scoreboard_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionSubmit_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameState_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingGameCycle_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueCreate_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueJoin_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueueList_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueueStatus_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Register_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scoreboard_response_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_response_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_response_2eproto;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
  const ::request::Login* login_;
  const ::request::Register* register__;
  const ::request::UserInfo* user_info_;
  const ::request::Scoreboard* scoreboard_;
  const ::request::QueueCreate* queue_create_;
  const ::request::QueueJoin* queue_join_;
  const ::request::QueueList* queue_list_;
  const ::request::QueueStatus* queue_status_;
  const ::request::PendingGameCycle* pending_game_cycle_;
  const ::request::GameState* game_state_;
  const ::request::ActionSubmit* action_submit_;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
  const ::response::Login* login_;
  const ::response::Register* register__;
  const ::response::UserInfo* user_info_;
  const ::response::Scoreboard* scoreboard_;
  const ::response::QueueCreate* queue_create_;
  const ::response::QueueJoin* queue_join_;
  const ::response::QueueList* queue_list_;
  const ::response::QueueStatus* queue_status_;
  const ::response::PendingGameCycle* pending_game_cycle_;
  const ::response::GameState* game_state_;
  const ::response::ActionSubmit* action_submit_;
} _Response_default_instance_;
static void InitDefaultsscc_info_Request_communication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Request_default_instance_;
    new (ptr) ::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Request_communication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsscc_info_Request_communication_2eproto}, {
      &scc_info_Login_request_2eproto.base,
      &scc_info_Register_request_2eproto.base,
      &scc_info_UserInfo_request_2eproto.base,
      &scc_info_Scoreboard_request_2eproto.base,
      &scc_info_QueueCreate_request_2eproto.base,
      &scc_info_QueueJoin_request_2eproto.base,
      &scc_info_QueueList_request_2eproto.base,
      &scc_info_QueueStatus_request_2eproto.base,
      &scc_info_PendingGameCycle_request_2eproto.base,
      &scc_info_GameState_request_2eproto.base,
      &scc_info_ActionSubmit_request_2eproto.base,}};

static void InitDefaultsscc_info_Response_communication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Response_default_instance_;
    new (ptr) ::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Response_communication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsscc_info_Response_communication_2eproto}, {
      &scc_info_Login_response_2eproto.base,
      &scc_info_Register_response_2eproto.base,
      &scc_info_UserInfo_response_2eproto.base,
      &scc_info_Scoreboard_response_2eproto.base,
      &scc_info_QueueCreate_response_2eproto.base,
      &scc_info_QueueJoin_response_2eproto.base,
      &scc_info_QueueList_response_2eproto.base,
      &scc_info_QueueStatus_response_2eproto.base,
      &scc_info_PendingGameCycle_response_2eproto.base,
      &scc_info_GameState_response_2eproto.base,
      &scc_info_ActionSubmit_response_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_communication_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_communication_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_communication_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_communication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::RequestDefaultTypeInternal, login_),
  offsetof(::RequestDefaultTypeInternal, register__),
  offsetof(::RequestDefaultTypeInternal, user_info_),
  offsetof(::RequestDefaultTypeInternal, scoreboard_),
  offsetof(::RequestDefaultTypeInternal, queue_create_),
  offsetof(::RequestDefaultTypeInternal, queue_join_),
  offsetof(::RequestDefaultTypeInternal, queue_list_),
  offsetof(::RequestDefaultTypeInternal, queue_status_),
  offsetof(::RequestDefaultTypeInternal, pending_game_cycle_),
  offsetof(::RequestDefaultTypeInternal, game_state_),
  offsetof(::RequestDefaultTypeInternal, action_submit_),
  PROTOBUF_FIELD_OFFSET(::Request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ResponseDefaultTypeInternal, login_),
  offsetof(::ResponseDefaultTypeInternal, register__),
  offsetof(::ResponseDefaultTypeInternal, user_info_),
  offsetof(::ResponseDefaultTypeInternal, scoreboard_),
  offsetof(::ResponseDefaultTypeInternal, queue_create_),
  offsetof(::ResponseDefaultTypeInternal, queue_join_),
  offsetof(::ResponseDefaultTypeInternal, queue_list_),
  offsetof(::ResponseDefaultTypeInternal, queue_status_),
  offsetof(::ResponseDefaultTypeInternal, pending_game_cycle_),
  offsetof(::ResponseDefaultTypeInternal, game_state_),
  offsetof(::ResponseDefaultTypeInternal, action_submit_),
  PROTOBUF_FIELD_OFFSET(::Response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Request)},
  { 17, -1, sizeof(::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Response_default_instance_),
};

const char descriptor_table_protodef_communication_2eproto[] =
  "\n\023communication.proto\032\rrequest.proto\032\016re"
  "sponse.proto\"\362\003\n\007Request\022\037\n\005login\030\001 \001(\0132"
  "\016.request.LoginH\000\022%\n\010register\030\002 \001(\0132\021.re"
  "quest.RegisterH\000\022&\n\tuser_info\030\003 \001(\0132\021.re"
  "quest.UserInfoH\000\022)\n\nscoreboard\030\004 \001(\0132\023.r"
  "equest.ScoreboardH\000\022,\n\014queue_create\030\005 \001("
  "\0132\024.request.QueueCreateH\000\022(\n\nqueue_join\030"
  "\006 \001(\0132\022.request.QueueJoinH\000\022(\n\nqueue_lis"
  "t\030\007 \001(\0132\022.request.QueueListH\000\022,\n\014queue_s"
  "tatus\030\010 \001(\0132\024.request.QueueStatusH\000\0227\n\022p"
  "ending_game_cycle\030\t \001(\0132\031.request.Pendin"
  "gGameCycleH\000\022(\n\ngame_state\030\n \001(\0132\022.reque"
  "st.GameStateH\000\022.\n\raction_submit\030\013 \001(\0132\025."
  "request.ActionSubmitH\000B\t\n\007request\"\377\003\n\010Re"
  "sponse\022 \n\005login\030\001 \001(\0132\017.response.LoginH\000"
  "\022&\n\010register\030\002 \001(\0132\022.response.RegisterH\000"
  "\022\'\n\tuser_info\030\003 \001(\0132\022.response.UserInfoH"
  "\000\022*\n\nscoreboard\030\004 \001(\0132\024.response.Scorebo"
  "ardH\000\022-\n\014queue_create\030\005 \001(\0132\025.response.Q"
  "ueueCreateH\000\022)\n\nqueue_join\030\006 \001(\0132\023.respo"
  "nse.QueueJoinH\000\022)\n\nqueue_list\030\007 \001(\0132\023.re"
  "sponse.QueueListH\000\022-\n\014queue_status\030\010 \001(\013"
  "2\025.response.QueueStatusH\000\0228\n\022pending_gam"
  "e_cycle\030\t \001(\0132\032.response.PendingGameCycl"
  "eH\000\022)\n\ngame_state\030\n \001(\0132\023.response.GameS"
  "tateH\000\022/\n\raction_submit\030\013 \001(\0132\026.response"
  ".ActionSubmitH\000B\n\n\010responseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_communication_2eproto_deps[2] = {
  &::descriptor_table_request_2eproto,
  &::descriptor_table_response_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_communication_2eproto_sccs[2] = {
  &scc_info_Request_communication_2eproto.base,
  &scc_info_Response_communication_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_communication_2eproto_once;
static bool descriptor_table_communication_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto = {
  &descriptor_table_communication_2eproto_initialized, descriptor_table_protodef_communication_2eproto, "communication.proto", 1075,
  &descriptor_table_communication_2eproto_once, descriptor_table_communication_2eproto_sccs, descriptor_table_communication_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_communication_2eproto::offsets,
  file_level_metadata_communication_2eproto, 2, file_level_enum_descriptors_communication_2eproto, file_level_service_descriptors_communication_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_communication_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_communication_2eproto), true);

// ===================================================================

void Request::InitAsDefaultInstance() {
  ::_Request_default_instance_.login_ = const_cast< ::request::Login*>(
      ::request::Login::internal_default_instance());
  ::_Request_default_instance_.register__ = const_cast< ::request::Register*>(
      ::request::Register::internal_default_instance());
  ::_Request_default_instance_.user_info_ = const_cast< ::request::UserInfo*>(
      ::request::UserInfo::internal_default_instance());
  ::_Request_default_instance_.scoreboard_ = const_cast< ::request::Scoreboard*>(
      ::request::Scoreboard::internal_default_instance());
  ::_Request_default_instance_.queue_create_ = const_cast< ::request::QueueCreate*>(
      ::request::QueueCreate::internal_default_instance());
  ::_Request_default_instance_.queue_join_ = const_cast< ::request::QueueJoin*>(
      ::request::QueueJoin::internal_default_instance());
  ::_Request_default_instance_.queue_list_ = const_cast< ::request::QueueList*>(
      ::request::QueueList::internal_default_instance());
  ::_Request_default_instance_.queue_status_ = const_cast< ::request::QueueStatus*>(
      ::request::QueueStatus::internal_default_instance());
  ::_Request_default_instance_.pending_game_cycle_ = const_cast< ::request::PendingGameCycle*>(
      ::request::PendingGameCycle::internal_default_instance());
  ::_Request_default_instance_.game_state_ = const_cast< ::request::GameState*>(
      ::request::GameState::internal_default_instance());
  ::_Request_default_instance_.action_submit_ = const_cast< ::request::ActionSubmit*>(
      ::request::ActionSubmit::internal_default_instance());
}
class Request::HasBitSetters {
 public:
  static const ::request::Login& login(const Request* msg);
  static const ::request::Register& register_(const Request* msg);
  static const ::request::UserInfo& user_info(const Request* msg);
  static const ::request::Scoreboard& scoreboard(const Request* msg);
  static const ::request::QueueCreate& queue_create(const Request* msg);
  static const ::request::QueueJoin& queue_join(const Request* msg);
  static const ::request::QueueList& queue_list(const Request* msg);
  static const ::request::QueueStatus& queue_status(const Request* msg);
  static const ::request::PendingGameCycle& pending_game_cycle(const Request* msg);
  static const ::request::GameState& game_state(const Request* msg);
  static const ::request::ActionSubmit& action_submit(const Request* msg);
};

const ::request::Login&
Request::HasBitSetters::login(const Request* msg) {
  return *msg->request_.login_;
}
const ::request::Register&
Request::HasBitSetters::register_(const Request* msg) {
  return *msg->request_.register__;
}
const ::request::UserInfo&
Request::HasBitSetters::user_info(const Request* msg) {
  return *msg->request_.user_info_;
}
const ::request::Scoreboard&
Request::HasBitSetters::scoreboard(const Request* msg) {
  return *msg->request_.scoreboard_;
}
const ::request::QueueCreate&
Request::HasBitSetters::queue_create(const Request* msg) {
  return *msg->request_.queue_create_;
}
const ::request::QueueJoin&
Request::HasBitSetters::queue_join(const Request* msg) {
  return *msg->request_.queue_join_;
}
const ::request::QueueList&
Request::HasBitSetters::queue_list(const Request* msg) {
  return *msg->request_.queue_list_;
}
const ::request::QueueStatus&
Request::HasBitSetters::queue_status(const Request* msg) {
  return *msg->request_.queue_status_;
}
const ::request::PendingGameCycle&
Request::HasBitSetters::pending_game_cycle(const Request* msg) {
  return *msg->request_.pending_game_cycle_;
}
const ::request::GameState&
Request::HasBitSetters::game_state(const Request* msg) {
  return *msg->request_.game_state_;
}
const ::request::ActionSubmit&
Request::HasBitSetters::action_submit(const Request* msg) {
  return *msg->request_.action_submit_;
}
void Request::set_allocated_login(::request::Login* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    request_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.login)
}
void Request::clear_login() {
  if (has_login()) {
    delete request_.login_;
    clear_has_request();
  }
}
void Request::set_allocated_register_(::request::Register* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    request_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.register)
}
void Request::clear_register_() {
  if (has_register_()) {
    delete request_.register__;
    clear_has_request();
  }
}
void Request::set_allocated_user_info(::request::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
    request_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.user_info)
}
void Request::clear_user_info() {
  if (has_user_info()) {
    delete request_.user_info_;
    clear_has_request();
  }
}
void Request::set_allocated_scoreboard(::request::Scoreboard* scoreboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (scoreboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scoreboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoreboard, submessage_arena);
    }
    set_has_scoreboard();
    request_.scoreboard_ = scoreboard;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.scoreboard)
}
void Request::clear_scoreboard() {
  if (has_scoreboard()) {
    delete request_.scoreboard_;
    clear_has_request();
  }
}
void Request::set_allocated_queue_create(::request::QueueCreate* queue_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (queue_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_create, submessage_arena);
    }
    set_has_queue_create();
    request_.queue_create_ = queue_create;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.queue_create)
}
void Request::clear_queue_create() {
  if (has_queue_create()) {
    delete request_.queue_create_;
    clear_has_request();
  }
}
void Request::set_allocated_queue_join(::request::QueueJoin* queue_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (queue_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_join, submessage_arena);
    }
    set_has_queue_join();
    request_.queue_join_ = queue_join;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.queue_join)
}
void Request::clear_queue_join() {
  if (has_queue_join()) {
    delete request_.queue_join_;
    clear_has_request();
  }
}
void Request::set_allocated_queue_list(::request::QueueList* queue_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (queue_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_list, submessage_arena);
    }
    set_has_queue_list();
    request_.queue_list_ = queue_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.queue_list)
}
void Request::clear_queue_list() {
  if (has_queue_list()) {
    delete request_.queue_list_;
    clear_has_request();
  }
}
void Request::set_allocated_queue_status(::request::QueueStatus* queue_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (queue_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_status, submessage_arena);
    }
    set_has_queue_status();
    request_.queue_status_ = queue_status;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.queue_status)
}
void Request::clear_queue_status() {
  if (has_queue_status()) {
    delete request_.queue_status_;
    clear_has_request();
  }
}
void Request::set_allocated_pending_game_cycle(::request::PendingGameCycle* pending_game_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (pending_game_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_game_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_game_cycle, submessage_arena);
    }
    set_has_pending_game_cycle();
    request_.pending_game_cycle_ = pending_game_cycle;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.pending_game_cycle)
}
void Request::clear_pending_game_cycle() {
  if (has_pending_game_cycle()) {
    delete request_.pending_game_cycle_;
    clear_has_request();
  }
}
void Request::set_allocated_game_state(::request::GameState* game_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (game_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_state, submessage_arena);
    }
    set_has_game_state();
    request_.game_state_ = game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.game_state)
}
void Request::clear_game_state() {
  if (has_game_state()) {
    delete request_.game_state_;
    clear_has_request();
  }
}
void Request::set_allocated_action_submit(::request::ActionSubmit* action_submit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (action_submit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_submit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_submit, submessage_arena);
    }
    set_has_action_submit();
    request_.action_submit_ = action_submit;
  }
  // @@protoc_insertion_point(field_set_allocated:Request.action_submit)
}
void Request::clear_action_submit() {
  if (has_action_submit()) {
    delete request_.action_submit_;
    clear_has_request();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kLoginFieldNumber;
const int Request::kRegisterFieldNumber;
const int Request::kUserInfoFieldNumber;
const int Request::kScoreboardFieldNumber;
const int Request::kQueueCreateFieldNumber;
const int Request::kQueueJoinFieldNumber;
const int Request::kQueueListFieldNumber;
const int Request::kQueueStatusFieldNumber;
const int Request::kPendingGameCycleFieldNumber;
const int Request::kGameStateFieldNumber;
const int Request::kActionSubmitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kLogin: {
      mutable_login()->::request::Login::MergeFrom(from.login());
      break;
    }
    case kRegister: {
      mutable_register_()->::request::Register::MergeFrom(from.register_());
      break;
    }
    case kUserInfo: {
      mutable_user_info()->::request::UserInfo::MergeFrom(from.user_info());
      break;
    }
    case kScoreboard: {
      mutable_scoreboard()->::request::Scoreboard::MergeFrom(from.scoreboard());
      break;
    }
    case kQueueCreate: {
      mutable_queue_create()->::request::QueueCreate::MergeFrom(from.queue_create());
      break;
    }
    case kQueueJoin: {
      mutable_queue_join()->::request::QueueJoin::MergeFrom(from.queue_join());
      break;
    }
    case kQueueList: {
      mutable_queue_list()->::request::QueueList::MergeFrom(from.queue_list());
      break;
    }
    case kQueueStatus: {
      mutable_queue_status()->::request::QueueStatus::MergeFrom(from.queue_status());
      break;
    }
    case kPendingGameCycle: {
      mutable_pending_game_cycle()->::request::PendingGameCycle::MergeFrom(from.pending_game_cycle());
      break;
    }
    case kGameState: {
      mutable_game_state()->::request::GameState::MergeFrom(from.game_state());
      break;
    }
    case kActionSubmit: {
      mutable_action_submit()->::request::ActionSubmit::MergeFrom(from.action_submit());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_communication_2eproto.base);
  clear_has_request();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_communication_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:Request)
  switch (request_case()) {
    case kLogin: {
      delete request_.login_;
      break;
    }
    case kRegister: {
      delete request_.register__;
      break;
    }
    case kUserInfo: {
      delete request_.user_info_;
      break;
    }
    case kScoreboard: {
      delete request_.scoreboard_;
      break;
    }
    case kQueueCreate: {
      delete request_.queue_create_;
      break;
    }
    case kQueueJoin: {
      delete request_.queue_join_;
      break;
    }
    case kQueueList: {
      delete request_.queue_list_;
      break;
    }
    case kQueueStatus: {
      delete request_.queue_status_;
      break;
    }
    case kPendingGameCycle: {
      delete request_.pending_game_cycle_;
      break;
    }
    case kGameState: {
      delete request_.game_state_;
      break;
    }
    case kActionSubmit: {
      delete request_.action_submit_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .request.Login login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.Register register = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_register_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.UserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.Scoreboard scoreboard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_scoreboard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.QueueCreate queue_create = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_queue_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.QueueJoin queue_join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_queue_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.QueueList queue_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_queue_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.QueueStatus queue_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_queue_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.PendingGameCycle pending_game_cycle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_pending_game_cycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.GameState game_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_game_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .request.ActionSubmit action_submit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_action_submit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .request.Login login = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.Register register = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.UserInfo user_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.Scoreboard scoreboard = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scoreboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.QueueCreate queue_create = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.QueueJoin queue_join = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.QueueList queue_list = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.QueueStatus queue_status = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.PendingGameCycle pending_game_cycle = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_game_cycle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.GameState game_state = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .request.ActionSubmit action_submit = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action_submit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .request.Login login = 1;
  if (has_login()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::login(this), output);
  }

  // .request.Register register = 2;
  if (has_register_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::register_(this), output);
  }

  // .request.UserInfo user_info = 3;
  if (has_user_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::user_info(this), output);
  }

  // .request.Scoreboard scoreboard = 4;
  if (has_scoreboard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::scoreboard(this), output);
  }

  // .request.QueueCreate queue_create = 5;
  if (has_queue_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::queue_create(this), output);
  }

  // .request.QueueJoin queue_join = 6;
  if (has_queue_join()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::queue_join(this), output);
  }

  // .request.QueueList queue_list = 7;
  if (has_queue_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::queue_list(this), output);
  }

  // .request.QueueStatus queue_status = 8;
  if (has_queue_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::queue_status(this), output);
  }

  // .request.PendingGameCycle pending_game_cycle = 9;
  if (has_pending_game_cycle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::pending_game_cycle(this), output);
  }

  // .request.GameState game_state = 10;
  if (has_game_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::game_state(this), output);
  }

  // .request.ActionSubmit action_submit = 11;
  if (has_action_submit()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::action_submit(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request)
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .request.Login login = 1;
  if (has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::login(this), target);
  }

  // .request.Register register = 2;
  if (has_register_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::register_(this), target);
  }

  // .request.UserInfo user_info = 3;
  if (has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::user_info(this), target);
  }

  // .request.Scoreboard scoreboard = 4;
  if (has_scoreboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::scoreboard(this), target);
  }

  // .request.QueueCreate queue_create = 5;
  if (has_queue_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::queue_create(this), target);
  }

  // .request.QueueJoin queue_join = 6;
  if (has_queue_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::queue_join(this), target);
  }

  // .request.QueueList queue_list = 7;
  if (has_queue_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::queue_list(this), target);
  }

  // .request.QueueStatus queue_status = 8;
  if (has_queue_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::queue_status(this), target);
  }

  // .request.PendingGameCycle pending_game_cycle = 9;
  if (has_pending_game_cycle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::pending_game_cycle(this), target);
  }

  // .request.GameState game_state = 10;
  if (has_game_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::game_state(this), target);
  }

  // .request.ActionSubmit action_submit = 11;
  if (has_action_submit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::action_submit(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .request.Login login = 1;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.login_);
      break;
    }
    // .request.Register register = 2;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.register__);
      break;
    }
    // .request.UserInfo user_info = 3;
    case kUserInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.user_info_);
      break;
    }
    // .request.Scoreboard scoreboard = 4;
    case kScoreboard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.scoreboard_);
      break;
    }
    // .request.QueueCreate queue_create = 5;
    case kQueueCreate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.queue_create_);
      break;
    }
    // .request.QueueJoin queue_join = 6;
    case kQueueJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.queue_join_);
      break;
    }
    // .request.QueueList queue_list = 7;
    case kQueueList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.queue_list_);
      break;
    }
    // .request.QueueStatus queue_status = 8;
    case kQueueStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.queue_status_);
      break;
    }
    // .request.PendingGameCycle pending_game_cycle = 9;
    case kPendingGameCycle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.pending_game_cycle_);
      break;
    }
    // .request.GameState game_state = 10;
    case kGameState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.game_state_);
      break;
    }
    // .request.ActionSubmit action_submit = 11;
    case kActionSubmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.action_submit_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kLogin: {
      mutable_login()->::request::Login::MergeFrom(from.login());
      break;
    }
    case kRegister: {
      mutable_register_()->::request::Register::MergeFrom(from.register_());
      break;
    }
    case kUserInfo: {
      mutable_user_info()->::request::UserInfo::MergeFrom(from.user_info());
      break;
    }
    case kScoreboard: {
      mutable_scoreboard()->::request::Scoreboard::MergeFrom(from.scoreboard());
      break;
    }
    case kQueueCreate: {
      mutable_queue_create()->::request::QueueCreate::MergeFrom(from.queue_create());
      break;
    }
    case kQueueJoin: {
      mutable_queue_join()->::request::QueueJoin::MergeFrom(from.queue_join());
      break;
    }
    case kQueueList: {
      mutable_queue_list()->::request::QueueList::MergeFrom(from.queue_list());
      break;
    }
    case kQueueStatus: {
      mutable_queue_status()->::request::QueueStatus::MergeFrom(from.queue_status());
      break;
    }
    case kPendingGameCycle: {
      mutable_pending_game_cycle()->::request::PendingGameCycle::MergeFrom(from.pending_game_cycle());
      break;
    }
    case kGameState: {
      mutable_game_state()->::request::GameState::MergeFrom(from.game_state());
      break;
    }
    case kActionSubmit: {
      mutable_action_submit()->::request::ActionSubmit::MergeFrom(from.action_submit());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::_Response_default_instance_.login_ = const_cast< ::response::Login*>(
      ::response::Login::internal_default_instance());
  ::_Response_default_instance_.register__ = const_cast< ::response::Register*>(
      ::response::Register::internal_default_instance());
  ::_Response_default_instance_.user_info_ = const_cast< ::response::UserInfo*>(
      ::response::UserInfo::internal_default_instance());
  ::_Response_default_instance_.scoreboard_ = const_cast< ::response::Scoreboard*>(
      ::response::Scoreboard::internal_default_instance());
  ::_Response_default_instance_.queue_create_ = const_cast< ::response::QueueCreate*>(
      ::response::QueueCreate::internal_default_instance());
  ::_Response_default_instance_.queue_join_ = const_cast< ::response::QueueJoin*>(
      ::response::QueueJoin::internal_default_instance());
  ::_Response_default_instance_.queue_list_ = const_cast< ::response::QueueList*>(
      ::response::QueueList::internal_default_instance());
  ::_Response_default_instance_.queue_status_ = const_cast< ::response::QueueStatus*>(
      ::response::QueueStatus::internal_default_instance());
  ::_Response_default_instance_.pending_game_cycle_ = const_cast< ::response::PendingGameCycle*>(
      ::response::PendingGameCycle::internal_default_instance());
  ::_Response_default_instance_.game_state_ = const_cast< ::response::GameState*>(
      ::response::GameState::internal_default_instance());
  ::_Response_default_instance_.action_submit_ = const_cast< ::response::ActionSubmit*>(
      ::response::ActionSubmit::internal_default_instance());
}
class Response::HasBitSetters {
 public:
  static const ::response::Login& login(const Response* msg);
  static const ::response::Register& register_(const Response* msg);
  static const ::response::UserInfo& user_info(const Response* msg);
  static const ::response::Scoreboard& scoreboard(const Response* msg);
  static const ::response::QueueCreate& queue_create(const Response* msg);
  static const ::response::QueueJoin& queue_join(const Response* msg);
  static const ::response::QueueList& queue_list(const Response* msg);
  static const ::response::QueueStatus& queue_status(const Response* msg);
  static const ::response::PendingGameCycle& pending_game_cycle(const Response* msg);
  static const ::response::GameState& game_state(const Response* msg);
  static const ::response::ActionSubmit& action_submit(const Response* msg);
};

const ::response::Login&
Response::HasBitSetters::login(const Response* msg) {
  return *msg->response_.login_;
}
const ::response::Register&
Response::HasBitSetters::register_(const Response* msg) {
  return *msg->response_.register__;
}
const ::response::UserInfo&
Response::HasBitSetters::user_info(const Response* msg) {
  return *msg->response_.user_info_;
}
const ::response::Scoreboard&
Response::HasBitSetters::scoreboard(const Response* msg) {
  return *msg->response_.scoreboard_;
}
const ::response::QueueCreate&
Response::HasBitSetters::queue_create(const Response* msg) {
  return *msg->response_.queue_create_;
}
const ::response::QueueJoin&
Response::HasBitSetters::queue_join(const Response* msg) {
  return *msg->response_.queue_join_;
}
const ::response::QueueList&
Response::HasBitSetters::queue_list(const Response* msg) {
  return *msg->response_.queue_list_;
}
const ::response::QueueStatus&
Response::HasBitSetters::queue_status(const Response* msg) {
  return *msg->response_.queue_status_;
}
const ::response::PendingGameCycle&
Response::HasBitSetters::pending_game_cycle(const Response* msg) {
  return *msg->response_.pending_game_cycle_;
}
const ::response::GameState&
Response::HasBitSetters::game_state(const Response* msg) {
  return *msg->response_.game_state_;
}
const ::response::ActionSubmit&
Response::HasBitSetters::action_submit(const Response* msg) {
  return *msg->response_.action_submit_;
}
void Response::set_allocated_login(::response::Login* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    response_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.login)
}
void Response::clear_login() {
  if (has_login()) {
    delete response_.login_;
    clear_has_response();
  }
}
void Response::set_allocated_register_(::response::Register* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    response_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.register)
}
void Response::clear_register_() {
  if (has_register_()) {
    delete response_.register__;
    clear_has_response();
  }
}
void Response::set_allocated_user_info(::response::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
    response_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.user_info)
}
void Response::clear_user_info() {
  if (has_user_info()) {
    delete response_.user_info_;
    clear_has_response();
  }
}
void Response::set_allocated_scoreboard(::response::Scoreboard* scoreboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (scoreboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scoreboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoreboard, submessage_arena);
    }
    set_has_scoreboard();
    response_.scoreboard_ = scoreboard;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.scoreboard)
}
void Response::clear_scoreboard() {
  if (has_scoreboard()) {
    delete response_.scoreboard_;
    clear_has_response();
  }
}
void Response::set_allocated_queue_create(::response::QueueCreate* queue_create) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (queue_create) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_create, submessage_arena);
    }
    set_has_queue_create();
    response_.queue_create_ = queue_create;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.queue_create)
}
void Response::clear_queue_create() {
  if (has_queue_create()) {
    delete response_.queue_create_;
    clear_has_response();
  }
}
void Response::set_allocated_queue_join(::response::QueueJoin* queue_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (queue_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_join, submessage_arena);
    }
    set_has_queue_join();
    response_.queue_join_ = queue_join;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.queue_join)
}
void Response::clear_queue_join() {
  if (has_queue_join()) {
    delete response_.queue_join_;
    clear_has_response();
  }
}
void Response::set_allocated_queue_list(::response::QueueList* queue_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (queue_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_list, submessage_arena);
    }
    set_has_queue_list();
    response_.queue_list_ = queue_list;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.queue_list)
}
void Response::clear_queue_list() {
  if (has_queue_list()) {
    delete response_.queue_list_;
    clear_has_response();
  }
}
void Response::set_allocated_queue_status(::response::QueueStatus* queue_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (queue_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queue_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queue_status, submessage_arena);
    }
    set_has_queue_status();
    response_.queue_status_ = queue_status;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.queue_status)
}
void Response::clear_queue_status() {
  if (has_queue_status()) {
    delete response_.queue_status_;
    clear_has_response();
  }
}
void Response::set_allocated_pending_game_cycle(::response::PendingGameCycle* pending_game_cycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (pending_game_cycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_game_cycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_game_cycle, submessage_arena);
    }
    set_has_pending_game_cycle();
    response_.pending_game_cycle_ = pending_game_cycle;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.pending_game_cycle)
}
void Response::clear_pending_game_cycle() {
  if (has_pending_game_cycle()) {
    delete response_.pending_game_cycle_;
    clear_has_response();
  }
}
void Response::set_allocated_game_state(::response::GameState* game_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (game_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_state, submessage_arena);
    }
    set_has_game_state();
    response_.game_state_ = game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.game_state)
}
void Response::clear_game_state() {
  if (has_game_state()) {
    delete response_.game_state_;
    clear_has_response();
  }
}
void Response::set_allocated_action_submit(::response::ActionSubmit* action_submit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (action_submit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_submit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_submit, submessage_arena);
    }
    set_has_action_submit();
    response_.action_submit_ = action_submit;
  }
  // @@protoc_insertion_point(field_set_allocated:Response.action_submit)
}
void Response::clear_action_submit() {
  if (has_action_submit()) {
    delete response_.action_submit_;
    clear_has_response();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kLoginFieldNumber;
const int Response::kRegisterFieldNumber;
const int Response::kUserInfoFieldNumber;
const int Response::kScoreboardFieldNumber;
const int Response::kQueueCreateFieldNumber;
const int Response::kQueueJoinFieldNumber;
const int Response::kQueueListFieldNumber;
const int Response::kQueueStatusFieldNumber;
const int Response::kPendingGameCycleFieldNumber;
const int Response::kGameStateFieldNumber;
const int Response::kActionSubmitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kLogin: {
      mutable_login()->::response::Login::MergeFrom(from.login());
      break;
    }
    case kRegister: {
      mutable_register_()->::response::Register::MergeFrom(from.register_());
      break;
    }
    case kUserInfo: {
      mutable_user_info()->::response::UserInfo::MergeFrom(from.user_info());
      break;
    }
    case kScoreboard: {
      mutable_scoreboard()->::response::Scoreboard::MergeFrom(from.scoreboard());
      break;
    }
    case kQueueCreate: {
      mutable_queue_create()->::response::QueueCreate::MergeFrom(from.queue_create());
      break;
    }
    case kQueueJoin: {
      mutable_queue_join()->::response::QueueJoin::MergeFrom(from.queue_join());
      break;
    }
    case kQueueList: {
      mutable_queue_list()->::response::QueueList::MergeFrom(from.queue_list());
      break;
    }
    case kQueueStatus: {
      mutable_queue_status()->::response::QueueStatus::MergeFrom(from.queue_status());
      break;
    }
    case kPendingGameCycle: {
      mutable_pending_game_cycle()->::response::PendingGameCycle::MergeFrom(from.pending_game_cycle());
      break;
    }
    case kGameState: {
      mutable_game_state()->::response::GameState::MergeFrom(from.game_state());
      break;
    }
    case kActionSubmit: {
      mutable_action_submit()->::response::ActionSubmit::MergeFrom(from.action_submit());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_communication_2eproto.base);
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_communication_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:Response)
  switch (response_case()) {
    case kLogin: {
      delete response_.login_;
      break;
    }
    case kRegister: {
      delete response_.register__;
      break;
    }
    case kUserInfo: {
      delete response_.user_info_;
      break;
    }
    case kScoreboard: {
      delete response_.scoreboard_;
      break;
    }
    case kQueueCreate: {
      delete response_.queue_create_;
      break;
    }
    case kQueueJoin: {
      delete response_.queue_join_;
      break;
    }
    case kQueueList: {
      delete response_.queue_list_;
      break;
    }
    case kQueueStatus: {
      delete response_.queue_status_;
      break;
    }
    case kPendingGameCycle: {
      delete response_.pending_game_cycle_;
      break;
    }
    case kGameState: {
      delete response_.game_state_;
      break;
    }
    case kActionSubmit: {
      delete response_.action_submit_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .response.Login login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.Register register = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_register_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.UserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.Scoreboard scoreboard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_scoreboard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.QueueCreate queue_create = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_queue_create(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.QueueJoin queue_join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_queue_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.QueueList queue_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_queue_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.QueueStatus queue_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_queue_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.PendingGameCycle pending_game_cycle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_pending_game_cycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.GameState game_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_game_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .response.ActionSubmit action_submit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_action_submit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Response)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .response.Login login = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.Register register = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.UserInfo user_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.Scoreboard scoreboard = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scoreboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.QueueCreate queue_create = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.QueueJoin queue_join = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.QueueList queue_list = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.QueueStatus queue_status = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_queue_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.PendingGameCycle pending_game_cycle = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pending_game_cycle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.GameState game_state = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .response.ActionSubmit action_submit = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_action_submit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .response.Login login = 1;
  if (has_login()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::login(this), output);
  }

  // .response.Register register = 2;
  if (has_register_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::register_(this), output);
  }

  // .response.UserInfo user_info = 3;
  if (has_user_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::user_info(this), output);
  }

  // .response.Scoreboard scoreboard = 4;
  if (has_scoreboard()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::scoreboard(this), output);
  }

  // .response.QueueCreate queue_create = 5;
  if (has_queue_create()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::queue_create(this), output);
  }

  // .response.QueueJoin queue_join = 6;
  if (has_queue_join()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::queue_join(this), output);
  }

  // .response.QueueList queue_list = 7;
  if (has_queue_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::queue_list(this), output);
  }

  // .response.QueueStatus queue_status = 8;
  if (has_queue_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::queue_status(this), output);
  }

  // .response.PendingGameCycle pending_game_cycle = 9;
  if (has_pending_game_cycle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::pending_game_cycle(this), output);
  }

  // .response.GameState game_state = 10;
  if (has_game_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::game_state(this), output);
  }

  // .response.ActionSubmit action_submit = 11;
  if (has_action_submit()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::action_submit(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Response)
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .response.Login login = 1;
  if (has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::login(this), target);
  }

  // .response.Register register = 2;
  if (has_register_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::register_(this), target);
  }

  // .response.UserInfo user_info = 3;
  if (has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::user_info(this), target);
  }

  // .response.Scoreboard scoreboard = 4;
  if (has_scoreboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::scoreboard(this), target);
  }

  // .response.QueueCreate queue_create = 5;
  if (has_queue_create()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::queue_create(this), target);
  }

  // .response.QueueJoin queue_join = 6;
  if (has_queue_join()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::queue_join(this), target);
  }

  // .response.QueueList queue_list = 7;
  if (has_queue_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::queue_list(this), target);
  }

  // .response.QueueStatus queue_status = 8;
  if (has_queue_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::queue_status(this), target);
  }

  // .response.PendingGameCycle pending_game_cycle = 9;
  if (has_pending_game_cycle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::pending_game_cycle(this), target);
  }

  // .response.GameState game_state = 10;
  if (has_game_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::game_state(this), target);
  }

  // .response.ActionSubmit action_submit = 11;
  if (has_action_submit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::action_submit(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .response.Login login = 1;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.login_);
      break;
    }
    // .response.Register register = 2;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.register__);
      break;
    }
    // .response.UserInfo user_info = 3;
    case kUserInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.user_info_);
      break;
    }
    // .response.Scoreboard scoreboard = 4;
    case kScoreboard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.scoreboard_);
      break;
    }
    // .response.QueueCreate queue_create = 5;
    case kQueueCreate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.queue_create_);
      break;
    }
    // .response.QueueJoin queue_join = 6;
    case kQueueJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.queue_join_);
      break;
    }
    // .response.QueueList queue_list = 7;
    case kQueueList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.queue_list_);
      break;
    }
    // .response.QueueStatus queue_status = 8;
    case kQueueStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.queue_status_);
      break;
    }
    // .response.PendingGameCycle pending_game_cycle = 9;
    case kPendingGameCycle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.pending_game_cycle_);
      break;
    }
    // .response.GameState game_state = 10;
    case kGameState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.game_state_);
      break;
    }
    // .response.ActionSubmit action_submit = 11;
    case kActionSubmit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.action_submit_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kLogin: {
      mutable_login()->::response::Login::MergeFrom(from.login());
      break;
    }
    case kRegister: {
      mutable_register_()->::response::Register::MergeFrom(from.register_());
      break;
    }
    case kUserInfo: {
      mutable_user_info()->::response::UserInfo::MergeFrom(from.user_info());
      break;
    }
    case kScoreboard: {
      mutable_scoreboard()->::response::Scoreboard::MergeFrom(from.scoreboard());
      break;
    }
    case kQueueCreate: {
      mutable_queue_create()->::response::QueueCreate::MergeFrom(from.queue_create());
      break;
    }
    case kQueueJoin: {
      mutable_queue_join()->::response::QueueJoin::MergeFrom(from.queue_join());
      break;
    }
    case kQueueList: {
      mutable_queue_list()->::response::QueueList::MergeFrom(from.queue_list());
      break;
    }
    case kQueueStatus: {
      mutable_queue_status()->::response::QueueStatus::MergeFrom(from.queue_status());
      break;
    }
    case kPendingGameCycle: {
      mutable_pending_game_cycle()->::response::PendingGameCycle::MergeFrom(from.pending_game_cycle());
      break;
    }
    case kGameState: {
      mutable_game_state()->::response::GameState::MergeFrom(from.game_state());
      break;
    }
    case kActionSubmit: {
      mutable_action_submit()->::response::ActionSubmit::MergeFrom(from.action_submit());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Request* Arena::CreateMaybeMessage< ::Request >(Arena* arena) {
  return Arena::CreateInternal< ::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Response* Arena::CreateMaybeMessage< ::Response >(Arena* arena) {
  return Arena::CreateInternal< ::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
