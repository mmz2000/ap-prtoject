// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_communication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "request.pb.h"
#include "response.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_communication_2eproto;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Request* Arena::CreateMaybeMessage<::Request>(Arena*);
template<> ::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum RequestCase {
    kLogin = 1,
    kRegister = 2,
    kUserInfo = 3,
    kScoreboard = 4,
    kQueueCreate = 5,
    kQueueJoin = 6,
    kQueueList = 7,
    kQueueStatus = 8,
    kPendingGameCycle = 9,
    kGameState = 10,
    kActionSubmit = 11,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .request.Login login = 1;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  const ::request::Login& login() const;
  ::request::Login* release_login();
  ::request::Login* mutable_login();
  void set_allocated_login(::request::Login* login);

  // .request.Register register = 2;
  bool has_register_() const;
  void clear_register_();
  static const int kRegisterFieldNumber = 2;
  const ::request::Register& register_() const;
  ::request::Register* release_register_();
  ::request::Register* mutable_register_();
  void set_allocated_register_(::request::Register* register_);

  // .request.UserInfo user_info = 3;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 3;
  const ::request::UserInfo& user_info() const;
  ::request::UserInfo* release_user_info();
  ::request::UserInfo* mutable_user_info();
  void set_allocated_user_info(::request::UserInfo* user_info);

  // .request.Scoreboard scoreboard = 4;
  bool has_scoreboard() const;
  void clear_scoreboard();
  static const int kScoreboardFieldNumber = 4;
  const ::request::Scoreboard& scoreboard() const;
  ::request::Scoreboard* release_scoreboard();
  ::request::Scoreboard* mutable_scoreboard();
  void set_allocated_scoreboard(::request::Scoreboard* scoreboard);

  // .request.QueueCreate queue_create = 5;
  bool has_queue_create() const;
  void clear_queue_create();
  static const int kQueueCreateFieldNumber = 5;
  const ::request::QueueCreate& queue_create() const;
  ::request::QueueCreate* release_queue_create();
  ::request::QueueCreate* mutable_queue_create();
  void set_allocated_queue_create(::request::QueueCreate* queue_create);

  // .request.QueueJoin queue_join = 6;
  bool has_queue_join() const;
  void clear_queue_join();
  static const int kQueueJoinFieldNumber = 6;
  const ::request::QueueJoin& queue_join() const;
  ::request::QueueJoin* release_queue_join();
  ::request::QueueJoin* mutable_queue_join();
  void set_allocated_queue_join(::request::QueueJoin* queue_join);

  // .request.QueueList queue_list = 7;
  bool has_queue_list() const;
  void clear_queue_list();
  static const int kQueueListFieldNumber = 7;
  const ::request::QueueList& queue_list() const;
  ::request::QueueList* release_queue_list();
  ::request::QueueList* mutable_queue_list();
  void set_allocated_queue_list(::request::QueueList* queue_list);

  // .request.QueueStatus queue_status = 8;
  bool has_queue_status() const;
  void clear_queue_status();
  static const int kQueueStatusFieldNumber = 8;
  const ::request::QueueStatus& queue_status() const;
  ::request::QueueStatus* release_queue_status();
  ::request::QueueStatus* mutable_queue_status();
  void set_allocated_queue_status(::request::QueueStatus* queue_status);

  // .request.PendingGameCycle pending_game_cycle = 9;
  bool has_pending_game_cycle() const;
  void clear_pending_game_cycle();
  static const int kPendingGameCycleFieldNumber = 9;
  const ::request::PendingGameCycle& pending_game_cycle() const;
  ::request::PendingGameCycle* release_pending_game_cycle();
  ::request::PendingGameCycle* mutable_pending_game_cycle();
  void set_allocated_pending_game_cycle(::request::PendingGameCycle* pending_game_cycle);

  // .request.GameState game_state = 10;
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 10;
  const ::request::GameState& game_state() const;
  ::request::GameState* release_game_state();
  ::request::GameState* mutable_game_state();
  void set_allocated_game_state(::request::GameState* game_state);

  // .request.ActionSubmit action_submit = 11;
  bool has_action_submit() const;
  void clear_action_submit();
  static const int kActionSubmitFieldNumber = 11;
  const ::request::ActionSubmit& action_submit() const;
  ::request::ActionSubmit* release_action_submit();
  ::request::ActionSubmit* mutable_action_submit();
  void set_allocated_action_submit(::request::ActionSubmit* action_submit);

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:Request)
 private:
  class HasBitSetters;
  void set_has_login();
  void set_has_register_();
  void set_has_user_info();
  void set_has_scoreboard();
  void set_has_queue_create();
  void set_has_queue_join();
  void set_has_queue_list();
  void set_has_queue_status();
  void set_has_pending_game_cycle();
  void set_has_game_state();
  void set_has_action_submit();

  inline bool has_request() const;
  inline void clear_has_request();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnion {
    RequestUnion() {}
    ::request::Login* login_;
    ::request::Register* register__;
    ::request::UserInfo* user_info_;
    ::request::Scoreboard* scoreboard_;
    ::request::QueueCreate* queue_create_;
    ::request::QueueJoin* queue_join_;
    ::request::QueueList* queue_list_;
    ::request::QueueStatus* queue_status_;
    ::request::PendingGameCycle* pending_game_cycle_;
    ::request::GameState* game_state_;
    ::request::ActionSubmit* action_submit_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum ResponseCase {
    kLogin = 1,
    kRegister = 2,
    kUserInfo = 3,
    kScoreboard = 4,
    kQueueCreate = 5,
    kQueueJoin = 6,
    kQueueList = 7,
    kQueueStatus = 8,
    kPendingGameCycle = 9,
    kGameState = 10,
    kActionSubmit = 11,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_communication_2eproto);
    return ::descriptor_table_communication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .response.Login login = 1;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 1;
  const ::response::Login& login() const;
  ::response::Login* release_login();
  ::response::Login* mutable_login();
  void set_allocated_login(::response::Login* login);

  // .response.Register register = 2;
  bool has_register_() const;
  void clear_register_();
  static const int kRegisterFieldNumber = 2;
  const ::response::Register& register_() const;
  ::response::Register* release_register_();
  ::response::Register* mutable_register_();
  void set_allocated_register_(::response::Register* register_);

  // .response.UserInfo user_info = 3;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 3;
  const ::response::UserInfo& user_info() const;
  ::response::UserInfo* release_user_info();
  ::response::UserInfo* mutable_user_info();
  void set_allocated_user_info(::response::UserInfo* user_info);

  // .response.Scoreboard scoreboard = 4;
  bool has_scoreboard() const;
  void clear_scoreboard();
  static const int kScoreboardFieldNumber = 4;
  const ::response::Scoreboard& scoreboard() const;
  ::response::Scoreboard* release_scoreboard();
  ::response::Scoreboard* mutable_scoreboard();
  void set_allocated_scoreboard(::response::Scoreboard* scoreboard);

  // .response.QueueCreate queue_create = 5;
  bool has_queue_create() const;
  void clear_queue_create();
  static const int kQueueCreateFieldNumber = 5;
  const ::response::QueueCreate& queue_create() const;
  ::response::QueueCreate* release_queue_create();
  ::response::QueueCreate* mutable_queue_create();
  void set_allocated_queue_create(::response::QueueCreate* queue_create);

  // .response.QueueJoin queue_join = 6;
  bool has_queue_join() const;
  void clear_queue_join();
  static const int kQueueJoinFieldNumber = 6;
  const ::response::QueueJoin& queue_join() const;
  ::response::QueueJoin* release_queue_join();
  ::response::QueueJoin* mutable_queue_join();
  void set_allocated_queue_join(::response::QueueJoin* queue_join);

  // .response.QueueList queue_list = 7;
  bool has_queue_list() const;
  void clear_queue_list();
  static const int kQueueListFieldNumber = 7;
  const ::response::QueueList& queue_list() const;
  ::response::QueueList* release_queue_list();
  ::response::QueueList* mutable_queue_list();
  void set_allocated_queue_list(::response::QueueList* queue_list);

  // .response.QueueStatus queue_status = 8;
  bool has_queue_status() const;
  void clear_queue_status();
  static const int kQueueStatusFieldNumber = 8;
  const ::response::QueueStatus& queue_status() const;
  ::response::QueueStatus* release_queue_status();
  ::response::QueueStatus* mutable_queue_status();
  void set_allocated_queue_status(::response::QueueStatus* queue_status);

  // .response.PendingGameCycle pending_game_cycle = 9;
  bool has_pending_game_cycle() const;
  void clear_pending_game_cycle();
  static const int kPendingGameCycleFieldNumber = 9;
  const ::response::PendingGameCycle& pending_game_cycle() const;
  ::response::PendingGameCycle* release_pending_game_cycle();
  ::response::PendingGameCycle* mutable_pending_game_cycle();
  void set_allocated_pending_game_cycle(::response::PendingGameCycle* pending_game_cycle);

  // .response.GameState game_state = 10;
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 10;
  const ::response::GameState& game_state() const;
  ::response::GameState* release_game_state();
  ::response::GameState* mutable_game_state();
  void set_allocated_game_state(::response::GameState* game_state);

  // .response.ActionSubmit action_submit = 11;
  bool has_action_submit() const;
  void clear_action_submit();
  static const int kActionSubmitFieldNumber = 11;
  const ::response::ActionSubmit& action_submit() const;
  ::response::ActionSubmit* release_action_submit();
  ::response::ActionSubmit* mutable_action_submit();
  void set_allocated_action_submit(::response::ActionSubmit* action_submit);

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:Response)
 private:
  class HasBitSetters;
  void set_has_login();
  void set_has_register_();
  void set_has_user_info();
  void set_has_scoreboard();
  void set_has_queue_create();
  void set_has_queue_join();
  void set_has_queue_list();
  void set_has_queue_status();
  void set_has_pending_game_cycle();
  void set_has_game_state();
  void set_has_action_submit();

  inline bool has_response() const;
  inline void clear_has_response();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ResponseUnion {
    ResponseUnion() {}
    ::response::Login* login_;
    ::response::Register* register__;
    ::response::UserInfo* user_info_;
    ::response::Scoreboard* scoreboard_;
    ::response::QueueCreate* queue_create_;
    ::response::QueueJoin* queue_join_;
    ::response::QueueList* queue_list_;
    ::response::QueueStatus* queue_status_;
    ::response::PendingGameCycle* pending_game_cycle_;
    ::response::GameState* game_state_;
    ::response::ActionSubmit* action_submit_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_communication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .request.Login login = 1;
inline bool Request::has_login() const {
  return request_case() == kLogin;
}
inline void Request::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline ::request::Login* Request::release_login() {
  // @@protoc_insertion_point(field_release:Request.login)
  if (has_login()) {
    clear_has_request();
      ::request::Login* temp = request_.login_;
    request_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::Login& Request::login() const {
  // @@protoc_insertion_point(field_get:Request.login)
  return has_login()
      ? *request_.login_
      : *reinterpret_cast< ::request::Login*>(&::request::_Login_default_instance_);
}
inline ::request::Login* Request::mutable_login() {
  if (!has_login()) {
    clear_request();
    set_has_login();
    request_.login_ = CreateMaybeMessage< ::request::Login >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.login)
  return request_.login_;
}

// .request.Register register = 2;
inline bool Request::has_register_() const {
  return request_case() == kRegister;
}
inline void Request::set_has_register_() {
  _oneof_case_[0] = kRegister;
}
inline ::request::Register* Request::release_register_() {
  // @@protoc_insertion_point(field_release:Request.register)
  if (has_register_()) {
    clear_has_request();
      ::request::Register* temp = request_.register__;
    request_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::Register& Request::register_() const {
  // @@protoc_insertion_point(field_get:Request.register)
  return has_register_()
      ? *request_.register__
      : *reinterpret_cast< ::request::Register*>(&::request::_Register_default_instance_);
}
inline ::request::Register* Request::mutable_register_() {
  if (!has_register_()) {
    clear_request();
    set_has_register_();
    request_.register__ = CreateMaybeMessage< ::request::Register >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.register)
  return request_.register__;
}

// .request.UserInfo user_info = 3;
inline bool Request::has_user_info() const {
  return request_case() == kUserInfo;
}
inline void Request::set_has_user_info() {
  _oneof_case_[0] = kUserInfo;
}
inline ::request::UserInfo* Request::release_user_info() {
  // @@protoc_insertion_point(field_release:Request.user_info)
  if (has_user_info()) {
    clear_has_request();
      ::request::UserInfo* temp = request_.user_info_;
    request_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::UserInfo& Request::user_info() const {
  // @@protoc_insertion_point(field_get:Request.user_info)
  return has_user_info()
      ? *request_.user_info_
      : *reinterpret_cast< ::request::UserInfo*>(&::request::_UserInfo_default_instance_);
}
inline ::request::UserInfo* Request::mutable_user_info() {
  if (!has_user_info()) {
    clear_request();
    set_has_user_info();
    request_.user_info_ = CreateMaybeMessage< ::request::UserInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.user_info)
  return request_.user_info_;
}

// .request.Scoreboard scoreboard = 4;
inline bool Request::has_scoreboard() const {
  return request_case() == kScoreboard;
}
inline void Request::set_has_scoreboard() {
  _oneof_case_[0] = kScoreboard;
}
inline ::request::Scoreboard* Request::release_scoreboard() {
  // @@protoc_insertion_point(field_release:Request.scoreboard)
  if (has_scoreboard()) {
    clear_has_request();
      ::request::Scoreboard* temp = request_.scoreboard_;
    request_.scoreboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::Scoreboard& Request::scoreboard() const {
  // @@protoc_insertion_point(field_get:Request.scoreboard)
  return has_scoreboard()
      ? *request_.scoreboard_
      : *reinterpret_cast< ::request::Scoreboard*>(&::request::_Scoreboard_default_instance_);
}
inline ::request::Scoreboard* Request::mutable_scoreboard() {
  if (!has_scoreboard()) {
    clear_request();
    set_has_scoreboard();
    request_.scoreboard_ = CreateMaybeMessage< ::request::Scoreboard >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.scoreboard)
  return request_.scoreboard_;
}

// .request.QueueCreate queue_create = 5;
inline bool Request::has_queue_create() const {
  return request_case() == kQueueCreate;
}
inline void Request::set_has_queue_create() {
  _oneof_case_[0] = kQueueCreate;
}
inline ::request::QueueCreate* Request::release_queue_create() {
  // @@protoc_insertion_point(field_release:Request.queue_create)
  if (has_queue_create()) {
    clear_has_request();
      ::request::QueueCreate* temp = request_.queue_create_;
    request_.queue_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::QueueCreate& Request::queue_create() const {
  // @@protoc_insertion_point(field_get:Request.queue_create)
  return has_queue_create()
      ? *request_.queue_create_
      : *reinterpret_cast< ::request::QueueCreate*>(&::request::_QueueCreate_default_instance_);
}
inline ::request::QueueCreate* Request::mutable_queue_create() {
  if (!has_queue_create()) {
    clear_request();
    set_has_queue_create();
    request_.queue_create_ = CreateMaybeMessage< ::request::QueueCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.queue_create)
  return request_.queue_create_;
}

// .request.QueueJoin queue_join = 6;
inline bool Request::has_queue_join() const {
  return request_case() == kQueueJoin;
}
inline void Request::set_has_queue_join() {
  _oneof_case_[0] = kQueueJoin;
}
inline ::request::QueueJoin* Request::release_queue_join() {
  // @@protoc_insertion_point(field_release:Request.queue_join)
  if (has_queue_join()) {
    clear_has_request();
      ::request::QueueJoin* temp = request_.queue_join_;
    request_.queue_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::QueueJoin& Request::queue_join() const {
  // @@protoc_insertion_point(field_get:Request.queue_join)
  return has_queue_join()
      ? *request_.queue_join_
      : *reinterpret_cast< ::request::QueueJoin*>(&::request::_QueueJoin_default_instance_);
}
inline ::request::QueueJoin* Request::mutable_queue_join() {
  if (!has_queue_join()) {
    clear_request();
    set_has_queue_join();
    request_.queue_join_ = CreateMaybeMessage< ::request::QueueJoin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.queue_join)
  return request_.queue_join_;
}

// .request.QueueList queue_list = 7;
inline bool Request::has_queue_list() const {
  return request_case() == kQueueList;
}
inline void Request::set_has_queue_list() {
  _oneof_case_[0] = kQueueList;
}
inline ::request::QueueList* Request::release_queue_list() {
  // @@protoc_insertion_point(field_release:Request.queue_list)
  if (has_queue_list()) {
    clear_has_request();
      ::request::QueueList* temp = request_.queue_list_;
    request_.queue_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::QueueList& Request::queue_list() const {
  // @@protoc_insertion_point(field_get:Request.queue_list)
  return has_queue_list()
      ? *request_.queue_list_
      : *reinterpret_cast< ::request::QueueList*>(&::request::_QueueList_default_instance_);
}
inline ::request::QueueList* Request::mutable_queue_list() {
  if (!has_queue_list()) {
    clear_request();
    set_has_queue_list();
    request_.queue_list_ = CreateMaybeMessage< ::request::QueueList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.queue_list)
  return request_.queue_list_;
}

// .request.QueueStatus queue_status = 8;
inline bool Request::has_queue_status() const {
  return request_case() == kQueueStatus;
}
inline void Request::set_has_queue_status() {
  _oneof_case_[0] = kQueueStatus;
}
inline ::request::QueueStatus* Request::release_queue_status() {
  // @@protoc_insertion_point(field_release:Request.queue_status)
  if (has_queue_status()) {
    clear_has_request();
      ::request::QueueStatus* temp = request_.queue_status_;
    request_.queue_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::QueueStatus& Request::queue_status() const {
  // @@protoc_insertion_point(field_get:Request.queue_status)
  return has_queue_status()
      ? *request_.queue_status_
      : *reinterpret_cast< ::request::QueueStatus*>(&::request::_QueueStatus_default_instance_);
}
inline ::request::QueueStatus* Request::mutable_queue_status() {
  if (!has_queue_status()) {
    clear_request();
    set_has_queue_status();
    request_.queue_status_ = CreateMaybeMessage< ::request::QueueStatus >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.queue_status)
  return request_.queue_status_;
}

// .request.PendingGameCycle pending_game_cycle = 9;
inline bool Request::has_pending_game_cycle() const {
  return request_case() == kPendingGameCycle;
}
inline void Request::set_has_pending_game_cycle() {
  _oneof_case_[0] = kPendingGameCycle;
}
inline ::request::PendingGameCycle* Request::release_pending_game_cycle() {
  // @@protoc_insertion_point(field_release:Request.pending_game_cycle)
  if (has_pending_game_cycle()) {
    clear_has_request();
      ::request::PendingGameCycle* temp = request_.pending_game_cycle_;
    request_.pending_game_cycle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::PendingGameCycle& Request::pending_game_cycle() const {
  // @@protoc_insertion_point(field_get:Request.pending_game_cycle)
  return has_pending_game_cycle()
      ? *request_.pending_game_cycle_
      : *reinterpret_cast< ::request::PendingGameCycle*>(&::request::_PendingGameCycle_default_instance_);
}
inline ::request::PendingGameCycle* Request::mutable_pending_game_cycle() {
  if (!has_pending_game_cycle()) {
    clear_request();
    set_has_pending_game_cycle();
    request_.pending_game_cycle_ = CreateMaybeMessage< ::request::PendingGameCycle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.pending_game_cycle)
  return request_.pending_game_cycle_;
}

// .request.GameState game_state = 10;
inline bool Request::has_game_state() const {
  return request_case() == kGameState;
}
inline void Request::set_has_game_state() {
  _oneof_case_[0] = kGameState;
}
inline ::request::GameState* Request::release_game_state() {
  // @@protoc_insertion_point(field_release:Request.game_state)
  if (has_game_state()) {
    clear_has_request();
      ::request::GameState* temp = request_.game_state_;
    request_.game_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::GameState& Request::game_state() const {
  // @@protoc_insertion_point(field_get:Request.game_state)
  return has_game_state()
      ? *request_.game_state_
      : *reinterpret_cast< ::request::GameState*>(&::request::_GameState_default_instance_);
}
inline ::request::GameState* Request::mutable_game_state() {
  if (!has_game_state()) {
    clear_request();
    set_has_game_state();
    request_.game_state_ = CreateMaybeMessage< ::request::GameState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.game_state)
  return request_.game_state_;
}

// .request.ActionSubmit action_submit = 11;
inline bool Request::has_action_submit() const {
  return request_case() == kActionSubmit;
}
inline void Request::set_has_action_submit() {
  _oneof_case_[0] = kActionSubmit;
}
inline ::request::ActionSubmit* Request::release_action_submit() {
  // @@protoc_insertion_point(field_release:Request.action_submit)
  if (has_action_submit()) {
    clear_has_request();
      ::request::ActionSubmit* temp = request_.action_submit_;
    request_.action_submit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request::ActionSubmit& Request::action_submit() const {
  // @@protoc_insertion_point(field_get:Request.action_submit)
  return has_action_submit()
      ? *request_.action_submit_
      : *reinterpret_cast< ::request::ActionSubmit*>(&::request::_ActionSubmit_default_instance_);
}
inline ::request::ActionSubmit* Request::mutable_action_submit() {
  if (!has_action_submit()) {
    clear_request();
    set_has_action_submit();
    request_.action_submit_ = CreateMaybeMessage< ::request::ActionSubmit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Request.action_submit)
  return request_.action_submit_;
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .response.Login login = 1;
inline bool Response::has_login() const {
  return response_case() == kLogin;
}
inline void Response::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline ::response::Login* Response::release_login() {
  // @@protoc_insertion_point(field_release:Response.login)
  if (has_login()) {
    clear_has_response();
      ::response::Login* temp = response_.login_;
    response_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::Login& Response::login() const {
  // @@protoc_insertion_point(field_get:Response.login)
  return has_login()
      ? *response_.login_
      : *reinterpret_cast< ::response::Login*>(&::response::_Login_default_instance_);
}
inline ::response::Login* Response::mutable_login() {
  if (!has_login()) {
    clear_response();
    set_has_login();
    response_.login_ = CreateMaybeMessage< ::response::Login >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.login)
  return response_.login_;
}

// .response.Register register = 2;
inline bool Response::has_register_() const {
  return response_case() == kRegister;
}
inline void Response::set_has_register_() {
  _oneof_case_[0] = kRegister;
}
inline ::response::Register* Response::release_register_() {
  // @@protoc_insertion_point(field_release:Response.register)
  if (has_register_()) {
    clear_has_response();
      ::response::Register* temp = response_.register__;
    response_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::Register& Response::register_() const {
  // @@protoc_insertion_point(field_get:Response.register)
  return has_register_()
      ? *response_.register__
      : *reinterpret_cast< ::response::Register*>(&::response::_Register_default_instance_);
}
inline ::response::Register* Response::mutable_register_() {
  if (!has_register_()) {
    clear_response();
    set_has_register_();
    response_.register__ = CreateMaybeMessage< ::response::Register >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.register)
  return response_.register__;
}

// .response.UserInfo user_info = 3;
inline bool Response::has_user_info() const {
  return response_case() == kUserInfo;
}
inline void Response::set_has_user_info() {
  _oneof_case_[0] = kUserInfo;
}
inline ::response::UserInfo* Response::release_user_info() {
  // @@protoc_insertion_point(field_release:Response.user_info)
  if (has_user_info()) {
    clear_has_response();
      ::response::UserInfo* temp = response_.user_info_;
    response_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::UserInfo& Response::user_info() const {
  // @@protoc_insertion_point(field_get:Response.user_info)
  return has_user_info()
      ? *response_.user_info_
      : *reinterpret_cast< ::response::UserInfo*>(&::response::_UserInfo_default_instance_);
}
inline ::response::UserInfo* Response::mutable_user_info() {
  if (!has_user_info()) {
    clear_response();
    set_has_user_info();
    response_.user_info_ = CreateMaybeMessage< ::response::UserInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.user_info)
  return response_.user_info_;
}

// .response.Scoreboard scoreboard = 4;
inline bool Response::has_scoreboard() const {
  return response_case() == kScoreboard;
}
inline void Response::set_has_scoreboard() {
  _oneof_case_[0] = kScoreboard;
}
inline ::response::Scoreboard* Response::release_scoreboard() {
  // @@protoc_insertion_point(field_release:Response.scoreboard)
  if (has_scoreboard()) {
    clear_has_response();
      ::response::Scoreboard* temp = response_.scoreboard_;
    response_.scoreboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::Scoreboard& Response::scoreboard() const {
  // @@protoc_insertion_point(field_get:Response.scoreboard)
  return has_scoreboard()
      ? *response_.scoreboard_
      : *reinterpret_cast< ::response::Scoreboard*>(&::response::_Scoreboard_default_instance_);
}
inline ::response::Scoreboard* Response::mutable_scoreboard() {
  if (!has_scoreboard()) {
    clear_response();
    set_has_scoreboard();
    response_.scoreboard_ = CreateMaybeMessage< ::response::Scoreboard >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.scoreboard)
  return response_.scoreboard_;
}

// .response.QueueCreate queue_create = 5;
inline bool Response::has_queue_create() const {
  return response_case() == kQueueCreate;
}
inline void Response::set_has_queue_create() {
  _oneof_case_[0] = kQueueCreate;
}
inline ::response::QueueCreate* Response::release_queue_create() {
  // @@protoc_insertion_point(field_release:Response.queue_create)
  if (has_queue_create()) {
    clear_has_response();
      ::response::QueueCreate* temp = response_.queue_create_;
    response_.queue_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::QueueCreate& Response::queue_create() const {
  // @@protoc_insertion_point(field_get:Response.queue_create)
  return has_queue_create()
      ? *response_.queue_create_
      : *reinterpret_cast< ::response::QueueCreate*>(&::response::_QueueCreate_default_instance_);
}
inline ::response::QueueCreate* Response::mutable_queue_create() {
  if (!has_queue_create()) {
    clear_response();
    set_has_queue_create();
    response_.queue_create_ = CreateMaybeMessage< ::response::QueueCreate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.queue_create)
  return response_.queue_create_;
}

// .response.QueueJoin queue_join = 6;
inline bool Response::has_queue_join() const {
  return response_case() == kQueueJoin;
}
inline void Response::set_has_queue_join() {
  _oneof_case_[0] = kQueueJoin;
}
inline ::response::QueueJoin* Response::release_queue_join() {
  // @@protoc_insertion_point(field_release:Response.queue_join)
  if (has_queue_join()) {
    clear_has_response();
      ::response::QueueJoin* temp = response_.queue_join_;
    response_.queue_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::QueueJoin& Response::queue_join() const {
  // @@protoc_insertion_point(field_get:Response.queue_join)
  return has_queue_join()
      ? *response_.queue_join_
      : *reinterpret_cast< ::response::QueueJoin*>(&::response::_QueueJoin_default_instance_);
}
inline ::response::QueueJoin* Response::mutable_queue_join() {
  if (!has_queue_join()) {
    clear_response();
    set_has_queue_join();
    response_.queue_join_ = CreateMaybeMessage< ::response::QueueJoin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.queue_join)
  return response_.queue_join_;
}

// .response.QueueList queue_list = 7;
inline bool Response::has_queue_list() const {
  return response_case() == kQueueList;
}
inline void Response::set_has_queue_list() {
  _oneof_case_[0] = kQueueList;
}
inline ::response::QueueList* Response::release_queue_list() {
  // @@protoc_insertion_point(field_release:Response.queue_list)
  if (has_queue_list()) {
    clear_has_response();
      ::response::QueueList* temp = response_.queue_list_;
    response_.queue_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::QueueList& Response::queue_list() const {
  // @@protoc_insertion_point(field_get:Response.queue_list)
  return has_queue_list()
      ? *response_.queue_list_
      : *reinterpret_cast< ::response::QueueList*>(&::response::_QueueList_default_instance_);
}
inline ::response::QueueList* Response::mutable_queue_list() {
  if (!has_queue_list()) {
    clear_response();
    set_has_queue_list();
    response_.queue_list_ = CreateMaybeMessage< ::response::QueueList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.queue_list)
  return response_.queue_list_;
}

// .response.QueueStatus queue_status = 8;
inline bool Response::has_queue_status() const {
  return response_case() == kQueueStatus;
}
inline void Response::set_has_queue_status() {
  _oneof_case_[0] = kQueueStatus;
}
inline ::response::QueueStatus* Response::release_queue_status() {
  // @@protoc_insertion_point(field_release:Response.queue_status)
  if (has_queue_status()) {
    clear_has_response();
      ::response::QueueStatus* temp = response_.queue_status_;
    response_.queue_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::QueueStatus& Response::queue_status() const {
  // @@protoc_insertion_point(field_get:Response.queue_status)
  return has_queue_status()
      ? *response_.queue_status_
      : *reinterpret_cast< ::response::QueueStatus*>(&::response::_QueueStatus_default_instance_);
}
inline ::response::QueueStatus* Response::mutable_queue_status() {
  if (!has_queue_status()) {
    clear_response();
    set_has_queue_status();
    response_.queue_status_ = CreateMaybeMessage< ::response::QueueStatus >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.queue_status)
  return response_.queue_status_;
}

// .response.PendingGameCycle pending_game_cycle = 9;
inline bool Response::has_pending_game_cycle() const {
  return response_case() == kPendingGameCycle;
}
inline void Response::set_has_pending_game_cycle() {
  _oneof_case_[0] = kPendingGameCycle;
}
inline ::response::PendingGameCycle* Response::release_pending_game_cycle() {
  // @@protoc_insertion_point(field_release:Response.pending_game_cycle)
  if (has_pending_game_cycle()) {
    clear_has_response();
      ::response::PendingGameCycle* temp = response_.pending_game_cycle_;
    response_.pending_game_cycle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::PendingGameCycle& Response::pending_game_cycle() const {
  // @@protoc_insertion_point(field_get:Response.pending_game_cycle)
  return has_pending_game_cycle()
      ? *response_.pending_game_cycle_
      : *reinterpret_cast< ::response::PendingGameCycle*>(&::response::_PendingGameCycle_default_instance_);
}
inline ::response::PendingGameCycle* Response::mutable_pending_game_cycle() {
  if (!has_pending_game_cycle()) {
    clear_response();
    set_has_pending_game_cycle();
    response_.pending_game_cycle_ = CreateMaybeMessage< ::response::PendingGameCycle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.pending_game_cycle)
  return response_.pending_game_cycle_;
}

// .response.GameState game_state = 10;
inline bool Response::has_game_state() const {
  return response_case() == kGameState;
}
inline void Response::set_has_game_state() {
  _oneof_case_[0] = kGameState;
}
inline ::response::GameState* Response::release_game_state() {
  // @@protoc_insertion_point(field_release:Response.game_state)
  if (has_game_state()) {
    clear_has_response();
      ::response::GameState* temp = response_.game_state_;
    response_.game_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::GameState& Response::game_state() const {
  // @@protoc_insertion_point(field_get:Response.game_state)
  return has_game_state()
      ? *response_.game_state_
      : *reinterpret_cast< ::response::GameState*>(&::response::_GameState_default_instance_);
}
inline ::response::GameState* Response::mutable_game_state() {
  if (!has_game_state()) {
    clear_response();
    set_has_game_state();
    response_.game_state_ = CreateMaybeMessage< ::response::GameState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.game_state)
  return response_.game_state_;
}

// .response.ActionSubmit action_submit = 11;
inline bool Response::has_action_submit() const {
  return response_case() == kActionSubmit;
}
inline void Response::set_has_action_submit() {
  _oneof_case_[0] = kActionSubmit;
}
inline ::response::ActionSubmit* Response::release_action_submit() {
  // @@protoc_insertion_point(field_release:Response.action_submit)
  if (has_action_submit()) {
    clear_has_response();
      ::response::ActionSubmit* temp = response_.action_submit_;
    response_.action_submit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::response::ActionSubmit& Response::action_submit() const {
  // @@protoc_insertion_point(field_get:Response.action_submit)
  return has_action_submit()
      ? *response_.action_submit_
      : *reinterpret_cast< ::response::ActionSubmit*>(&::response::_ActionSubmit_default_instance_);
}
inline ::response::ActionSubmit* Response::mutable_action_submit() {
  if (!has_action_submit()) {
    clear_response();
    set_has_action_submit();
    response_.action_submit_ = CreateMaybeMessage< ::response::ActionSubmit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Response.action_submit)
  return response_.action_submit_;
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_communication_2eproto
